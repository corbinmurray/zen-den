description: |
  Zen Den is a digital zen garden, an interactive online tool where users can design their own tranquil, personalized space. They’d get to arrange elements like rocks, plants, and water features on a canvas to craft a peaceful scene that reflects their vibe. It’s a bit like tending to a mini garden, but digitally, and it’s super calming and fun to play with.. The project emphasizes:
  - **Next.js 15** (App Router, Server Components, Optimized Performance)
  - **Tailwind CSS v4** (Utility-first styling, Dark Mode support, Responsive Design)
  - **shadcn** (Elegant UI Components, Accessible Design)
  - **Motion** (Smooth Animations, Interactive Effects, Performance Optimization)

========================
TECH STACK (Strict Enforcement)
========================
required_technologies:
  frontend:
    - Next.js 15
    - Tailwind CSS v4
    - shadcn (npx shadcn@latest add {component-name})
    - Motion ("npm install motion" [used to be Framer Motion])
      - When using motion, it's very important to use `import { motion } from "motion/react"` for client-side components and `import * as motion from "motion/react-client"` for server-side components.
  deployment:
    - Coolify (public GitHub repository)

========================
File & Folder Structure
========================
folder_structure:
  /app:
    - /page.tsx: Landing/home page of the application
  /components: Reusable UI components (buttons, modals, etc.)
    - /ui: Specifically for shadcn components. All other components we create will go into /components/
  /lib: Utility functions & hooks
  /public: Static assets (images, fonts, etc.)

========================
Frontend Performance & UX Guidelines
========================
performance_guidelines:
  - Ensure **Fast TTFB (<100ms)** via optimized Next.js server rendering
  - Use **React.memo & lazy loading** for performance-critical components
  - Optimize animations with **Framer Motion’s layoutId & stagger effects**
  - Implement **debounced inputs (300ms)** for form fields & search
  - Ensure **immediate UI feedback** on all interactive elements
  - Every new component we create should default to a server component. We will only use client components if absolutely necessary.
  - When using shadcn/tailwindcss color utility classes remember that `{util}-foreground` is to only ever be used if `bg-{color}` is used. The `-foreground` utility class is only for when elements are placed on top of colored background. Example: if I want my text primary I would use `text-primary` or if I want muted I would use `text-muted`.

========================
Error Handling & Edge Case Management
========================
error_handling:
  - Use **try/catch with graceful fallbacks** in async operations
  - Implement **error boundaries** in Next.js for page-level error handling
  - Ensure all API calls handle **loading, empty, and error states explicitly**
  - Validate user inputs with **client-side and server-side checks**

========================
Security & Compliance
========================
security_standards:
  - Secure environment variables via **Next.js Environment Config**
  - Sanitize user-generated content to prevent **XSS attacks**
  - Use **CSP headers & security middleware** for protection

========================
Accessibility Standards
========================
accessibility:
  - Ensure **WCAG 2.1 AA compliance**
  - Use **semantic HTML & ARIA roles** in ShadCN components
  - Implement **keyboard navigation & screen reader support**
  - Provide **motion-reduction options** for animations

========================
Documentation & Maintenance
========================
documentation:
  - Use **JSDoc for components & utilities**
  - Maintain **README with project setup & development guidelines**
  - Update **CHANGELOG with each release**
  - Conduct **monthly audits for unused components & assets**

========================
AI Tool Usage & Context Injection
========================
ai_usage:
  - AI should **gather full context** before making changes (use `@file` & `@folder` references)
  - Always **explain tool usage before execution**
  - Limit **repetitive fix loops to 3 iterations max**
  - AI must flag missing **error handling & accessibility gaps explicitly**
  - AI should only ever add code comments on functions, large/complex blocks of code, or descriptive class names using JSDoc.